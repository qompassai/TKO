"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = exports.fetchWithPolling = exports.fetch = void 0;
const axios_1 = __importDefault(require("axios"));
const util_1 = require("../util");
const Util = __importStar(require("../util"));
var Endpoint;
(function (Endpoint) {
    Endpoint["CREATE"] = "models/:id/generations";
    Endpoint["FETCH"] = "generations/:id";
})(Endpoint || (Endpoint = {}));
function mapGeneration(generation) {
    const mapped = {
        ...generation,
        createdAt: new Date(generation.created_at),
        updatedAt: new Date(generation.updated_at),
    };
    delete mapped.created_at;
    delete mapped.updated_at;
    return mapped;
}
/**
 * EverArt Fetch Generation (v1/generations/:id)
 */
async function fetch(...args) {
    const [id] = args;
    const endpoint = Endpoint.FETCH.replace(':id', id);
    const response = await axios_1.default.get(Util.makeUrl(util_1.APIVersion.V1, endpoint), {
        headers: this.defaultHeaders,
        validateStatus: undefined,
    });
    if (response.status === 200 && response.data.generation) {
        return mapGeneration(response.data.generation);
    }
    throw new util_1.EverArtError(response.status, 'Failed to fetch generation', response.data);
}
exports.fetch = fetch;
/**
 * EverArt Fetch Generation w/ polling (v1/generations/:id)
 */
async function fetchWithPolling(...args) {
    const [id] = args;
    let generation = await this.v1.generations.fetch(id);
    while (generation.status === 'STARTING' ||
        generation.status === 'PROCESSING') {
        await Util.sleep(1000);
        generation = await this.v1.generations.fetch(id);
    }
    return generation;
}
exports.fetchWithPolling = fetchWithPolling;
/**
 * EverArt Create Generations (v1/models/:id/generations)
 *
 * @param modelId - The model ID to use for the generation
 * @param prompt - The prompt to use for the generation
 * @param options - Additional options for the generation
 */
async function create(...args) {
    const [modelId, prompt, type, options] = args;
    const body = {
        prompt,
        type,
    };
    if (options === null || options === void 0 ? void 0 : options.image)
        body.image = options.image;
    if (options === null || options === void 0 ? void 0 : options.height)
        body.height = options.height;
    if (options === null || options === void 0 ? void 0 : options.width)
        body.width = options.width;
    if (options === null || options === void 0 ? void 0 : options.imageCount)
        body.image_count = options.imageCount;
    if (options === null || options === void 0 ? void 0 : options.webhookUrl)
        body.webhook_url = options.webhookUrl;
    const endpoint = Endpoint.CREATE.replace(':id', modelId);
    const response = await axios_1.default.post(Util.makeUrl(util_1.APIVersion.V1, endpoint), body, {
        headers: this.defaultHeaders,
        validateStatus: undefined,
    });
    if (response.status === 200 && Array.isArray(response.data.generations)) {
        return response.data.generations.map(mapGeneration);
    }
    throw new util_1.EverArtError(response.status, 'Failed to create generations', response.data);
}
exports.create = create;
//# sourceMappingURL=generations.js.map