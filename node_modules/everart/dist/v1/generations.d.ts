import EverArt from '..';
type GenerationStatus = 'STARTING' | 'PROCESSING' | 'SUCCEEDED' | 'FAILED' | 'CANCELED';
type GenerationType = 'txt2img' | 'img2img';
type Generation = {
    id: string;
    model_id: string;
    status: GenerationStatus;
    image_url: string | null;
    type: GenerationType;
    createdAt: Date;
    updatedAt: Date;
};
export type FetchResponse = Generation;
export type FetchOptions = [id: string];
/**
 * EverArt Fetch Generation (v1/generations/:id)
 */
export declare function fetch(this: EverArt, ...args: FetchOptions): Promise<FetchResponse>;
/**
 * EverArt Fetch Generation w/ polling (v1/generations/:id)
 */
export declare function fetchWithPolling(this: EverArt, ...args: FetchOptions): Promise<FetchResponse>;
export type V1CreateRequiredParams = [
    modelId: string,
    prompt: string,
    type: GenerationType
];
export type V1CreateOptionalParams = {
    image?: string;
    imageCount?: number;
    height?: number;
    width?: number;
    webhookUrl?: string;
};
export type CreateOptions = [
    ...V1CreateRequiredParams,
    options?: V1CreateOptionalParams
];
export type CreateResponse = Generation[];
/**
 * EverArt Create Generations (v1/models/:id/generations)
 *
 * @param modelId - The model ID to use for the generation
 * @param prompt - The prompt to use for the generation
 * @param options - Additional options for the generation
 */
export declare function create(this: EverArt, ...args: CreateOptions): Promise<CreateResponse>;
export {};
