import EverArt from '..';
type PredictionStatus = 'STARTING' | 'PROCESSING' | 'SUCCEEDED' | 'FAILED' | 'CANCELED';
type PredictionType = 'txt2img' | 'img2img';
type Prediction = {
    id: string;
    model_id: string;
    status: PredictionStatus;
    image_url: string | null;
    type: PredictionType;
};
export type FetchResponse = Prediction;
export type FetchOptions = [id: string];
/**
 * EverArt Fetch Prediction (v1/predictions/:id)
 *
 * @deprecated Use generations instead. This will be removed in a future version.
 */
export declare function fetch(this: EverArt, ...args: FetchOptions): Promise<FetchResponse>;
/**
 * EverArt Fetch Prediction w/ polling (v1/predictions/:id)
 *
 * @deprecated Use generations instead. This will be removed in a future version.
 */
export declare function fetchWithPolling(this: EverArt, ...args: FetchOptions): Promise<FetchResponse>;
export type V1CreateRequiredParams = [
    modelId: string,
    prompt: string,
    type: PredictionType
];
export type V1CreateOptionalParams = {
    image?: string;
    imageCount?: number;
    height?: number;
    width?: number;
};
export type CreateOptions = [
    ...V1CreateRequiredParams,
    options?: V1CreateOptionalParams
];
export type CreateResponse = Prediction[];
/**
 * EverArt Create Predictions (v1/models/:id/predictions)
 *
 * @deprecated Use generations instead. This will be removed in a future version.
 *
 * @param modelId - The model ID to use for the prediction
 * @param prompt - The prompt to use for the prediction
 * @param options - Additional options for the predictions
 */
export declare function create(this: EverArt, ...args: CreateOptions): Promise<CreateResponse>;
export {};
