import * as V1Generations from './v1/generations';
import * as V1Images from './v1/images';
import * as V1Models from './v1/models';
import * as V1Predictions from './v1/predictions';
declare class EverArt {
    private apiKey;
    constructor(apiKey: string);
    protected get defaultHeaders(): {
        Authorization: string;
        'Content-Type': string;
    };
    get v1(): {
        generations: {
            create: (modelId: string, prompt: string, type: "txt2img" | "img2img", options?: V1Generations.V1CreateOptionalParams | undefined) => Promise<V1Generations.CreateResponse>;
            fetch: (id: string) => Promise<V1Generations.FetchResponse>;
            fetchWithPolling: (id: string) => Promise<V1Generations.FetchResponse>;
        };
        images: {
            uploads: (images: V1Images.UploadsRequestImage[]) => Promise<V1Images.UploadsResponse>;
        };
        models: {
            fetch: (id: string) => Promise<V1Models.FetchResponse>;
            fetchMany: (options?: {
                beforeId?: string | undefined;
                limit?: number | undefined;
                search?: string | undefined;
                status?: ("PROCESSING" | "FAILED" | "CANCELED" | "PENDING" | "TRAINING" | "READY") | undefined;
            } | undefined) => Promise<V1Models.FetchManyResponse>;
            create: (name: string, subject: "OBJECT" | "STYLE" | "PERSON", images: V1Models.ImageInput[], options?: V1Models.V1CreateOptionalParams | undefined) => Promise<V1Models.CreateResponse>;
        };
        /**
         * @deprecated Use generations instead. This will be removed in a future version.
         */
        predictions: {
            create: (modelId: string, prompt: string, type: "txt2img" | "img2img", options?: V1Predictions.V1CreateOptionalParams | undefined) => Promise<V1Predictions.CreateResponse>;
            fetch: (id: string) => Promise<V1Predictions.FetchResponse>;
            fetchWithPolling: (id: string) => Promise<V1Predictions.FetchResponse>;
        };
    };
}
export default EverArt;
